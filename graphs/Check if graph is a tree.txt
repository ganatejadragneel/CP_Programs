package graphs;
import java.util.*;
import java.io.*;

public class Graphs {
    
    static class Graph{
        int V;
        LinkedList<Integer> adjList[];
        
        Graph(int V){
            this.V=V;
            adjList = new LinkedList[V];
            for(int i=0;i<V;i++) adjList[i]=new LinkedList<>();
        }
    }
    
    static void addEdge(Graph graph,int source,int dest){
        graph.adjList[source].add(dest);
        graph.adjList[dest].add(source);
    }
    
    static boolean isCyclic(Graph graph,int i,boolean[] visited,int parent){
        visited[i]=true;
        int l = graph.V;
        Iterator<Integer> it = graph.adjList[i].iterator();
        while(it.hasNext()){
            int j = it.next();
            if(!visited[j]){
                if(isCyclic(graph,j,visited,i)) return true;
            }
            else if(j!=parent) return true;
        }
        
        return false;
    }
    
    static boolean isTree(Graph graph){
        int l = graph.adjList.length;
        boolean visited[]=new boolean[l];
        
        if(isCyclic(graph,0,visited,-1)) return false;
                
        for(int i=0;i<l;i++) if(!visited[i]) return false;
        return true;
    }
    
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //int nodes = Integer.parseInt(br.readLine().trim());
        Graph graph = new Graph(6);
        addEdge(graph,0,1);
        addEdge(graph,1,2);
        addEdge(graph,2,3);
        //addEdge(graph,3,1);
        /*addEdge(graph,2,4);*/
        addEdge(graph,3,4);
        addEdge(graph,4,5);
        System.out.println(isTree(graph));
    }
}
