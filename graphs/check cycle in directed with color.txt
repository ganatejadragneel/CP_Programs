package graphs;
import java.util.*;
import java.io.*;

public class Graphs {
    
    static class Graph{
        int V;
        LinkedList<Integer> adjList[];
        
        Graph(int V){
            this.V=V;
            adjList = new LinkedList[V];
            for(int i=0;i<V;i++) adjList[i]=new LinkedList<>();
        }
    }
    
    static void addEdge(Graph graph,int source,int dest){
        graph.adjList[source].add(dest);
        //graph.adjList[dest].add(source);
    }
    
    static int WHITE = 0,GRAY=1,BLACK=2;
    
    static boolean dfs_color(Graph graph,int i, int color[]){
        
        color[i]=GRAY;
        
        Iterator<Integer> it = graph.adjList[i].iterator();
        while(it.hasNext()){
            int x = it.next();
            if(color[x]==GRAY) return true;
            if(color[x]==WHITE && dfs_color(graph,x,color)) return true;
        }
        
        color[i]=BLACK;
        return false;
    }
    
    static boolean isCyclic(Graph graph){
        int l = graph.adjList.length;
        int []color=new int[l];
        for(int i=0;i<l;i++){
            if(dfs_color(graph,i,color)) return true;
        }
        return false;
    }
    
    public static void main(String[] args) throws IOException{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        //int nodes = Integer.parseInt(br.readLine().trim());
        Graph graph = new Graph(5);
        addEdge(graph,0,1);
        addEdge(graph,1,2);
        addEdge(graph,2,3);
        addEdge(graph,3,1);
        /*addEdge(graph,2,4);
        addEdge(graph,3,4);*/
        System.out.println(isCyclic(graph));
    }
}
