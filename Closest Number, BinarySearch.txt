import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
 {
    static int binCloseSearch(int arr[],int low,int high, int x)
    {
        if(arr[low]>x) return arr[low];
        if(arr[high]<x) return arr[high];
        while(low<=high){
            int mid=(low+high)/2;
            if(x<arr[mid]){
                high=mid-1;
            }
            else if(x>arr[mid]){
                low=mid+1;
            }
            else{
                return arr[mid];
            }
        }
        int z = (arr[low]-x)<(x-arr[high])?low:high;
        int m=Math.abs(arr[z]-x);
        if(m==(Math.abs(arr[z+1]-x))){
            m=arr[z+1];
            z++;
        }
        return(arr[z]);
    }
	public static void main (String[] args)
	 {
	     try{
	         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	         int t = Integer.parseInt(br.readLine());
	         while(t>0){
	             String s[]=br.readLine().trim().split("\\s+");
	             String s1[]=br.readLine().trim().split("\\s+");
	             int n = Integer.parseInt(s[0]);
	             int k = Integer.parseInt(s[1]);
	             int a[]=new int[n+1];
	             a[n]=99999;
	             for(int i=0;i<n;i++) a[i]=Integer.parseInt(s1[i]);
	             int req = binCloseSearch(a,0,n-1,k);
	             System.out.println(req);
	             t--;
	         }
	     }
	     catch(Exception e){
	         e.printStackTrace();
	     }
	 }
}